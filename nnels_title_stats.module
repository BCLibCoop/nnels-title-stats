<?php
/**
 * Implements hook_block_info().
 */
function nnels_title_stats_block_info() {
  $blocks = array();

  $blocks['title_stats'] = array(
    'info' => t('Title Statistics'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */

function nnels_title_stats_block_view($block_name = '') {
  if ($block_name == 'title_stats') {

    $titles_total = title_stats_total_titles();
    $files_total = title_stats_total_file_resource();
    

    $cancon_genre = title_stats_cancon_genre_total();
    $cancon_subjects = title_stats_cancon_subject_total();

    $cancon_count = (int)$cancon_genre + (int)$cancon_subjects; //"Cancon" is entities with Canadian genres + subjects applied

    $synth_narrators = title_stats_synth_totals();
    $narrators = title_stats_narrator_totals();
    $nonsynth = (int)$narrators - (int)$synth_narrators; //Live narration is difference between total and synth

    $subj_top = title_stats_subject_count_ranks('DESC', 10);

    $titles_rows = array(
      array('Published titles', $titles_total),
      array('Canadian content titles', $cancon_count),
      );

    $titles_header = array(
      array('data' => 'Metric'),
      array('data' => '#'),
      );

    $content .= '<h2>Titles</h2>';

    $content .= theme('table',
      array('header' => $titles_header, 
            'rows' => $titles_rows)
      );

    $files_rows = array(
      array('Published file resources', $files_total),
      array('Live narrated', $nonsynth),
      array('Synthetic narrated', $synth_narrators),
      );

    $files_header = array(
      array('data' => 'Metric'),
      array('data' => '#'),
      );

    $content .= '<h2>Files</h2>';

    $content .= theme('table',
      array('header' => $files_header,
            'rows' => $files_rows)
      );

    $format_totals_raw = title_stats_format_totals();

    //If no epub 3 format add it in for completeness - mappings unlikely to change soon
    if (! array_key_exists('8', $format_totals_raw)) {
      array_push($format_totals_raw, "0");
    }

    $formats = array(
      'DAISY 202',
      'DAISY 3',
      'Braille',
      'MP3',
      'e-text',
      'PDF',
      'EPUB 2',
      'EPUB 3',);

    $format_totals_combo = array_combine($formats, $format_totals_raw); //combine the formats with the grouped format counts

    $format_rows = array();

    foreach ($format_totals_combo as $key => $value) { //create a new array on key position
      $format_rows[] = array($key, (int)$value);
    }

    usort($format_rows, function($a, $b) { //sort array items descending
    return $b[1] - $a[1];
    });

    $format_header = array(
      array('data' => 'Format'),
      array('data' => '#'),
      );

    $content .= theme('table',
      array('header' => $format_header, 
            'rows' => $format_rows)
      );

    $subj_header = array(
      array('data' => 'Term ID'),
      array('data' => 'Subject'),
      array('data' => '#'),
      );

    foreach ($subj_top as $obj) {
      $top[] = (array) $obj;
    }

    $content .= '<h2>Top 10 Subjects</h2>';

    $content .= theme('table',
      array('header' => $subj_header, 
            'rows' => $top)
      );

    $block = array(
      'subject' => t('NNELS Title Stats'),
      'content' => $content,
      );
  }

  return $block;
}

//Query Functions

function title_stats_total_titles() {

  $start = microtime(true);
  $query = db_query("SELECT nid FROM {node} WHERE status = 1 AND type = :type", 
    array(
    ':type' => 'repository_item',
  ));
  $results = $query->rowCount(); //or $query->rowCount() faster?
  $end = microtime(true);

  $speed = ($end - $start) *1000;
  dpm($speed, 'Total titles query speed (ms): ');

  return $results;
}

function title_stats_total_file_resource() {

  //Number of file resources attached to published repo items
  $start = microtime(true);
  $query = db_query("SELECT field_file_resource_value
                    FROM {field_data_field_file_resource} fdfr
                    INNER JOIN
                    (SELECT nid
                    FROM {node}
                    WHERE status = :status) AS nodes
                    ON nodes.nid = fdfr.entity_id", 
                    array(
                      ':status' => 1,)
                    );
  $results = $query->rowCount();
  $end = microtime(true);

  $speed = ($end - $start) * 1000;
  dpm($speed, 'Total files query speed (ms): ');

  return $results;
}

function title_stats_format_totals() {

  $start = microtime(true);
  //Count files per format that are attached to published nodes (only repo-item implicit)
  $query = db_query("SELECT field_file_format_value, COUNT(entity_id) 
    FROM {field_data_field_file_format} fdff
    INNER JOIN
   (SELECT field_file_resource_value ffrv, entity_id ei
    FROM {field_data_field_file_resource}
    ) AS files
    ON files.ffrv = fdff.entity_id
    INNER JOIN
   (SELECT nid
    FROM {node}
    WHERE status = :status) AS nodes
    ON nodes.nid = files.ei
    GROUP BY field_file_format_value", 
    array(
      ':status' => 1,)
    );

  $results = $query->fetchAllKeyed();
  $end = microtime(true);

  $speed = ($end - $start) * 1000;
  dpm($speed, 'Total format query speed (ms): ');

  return $results;
}

function title_stats_synth_totals() {

  $query = db_query("SELECT field_file_resource_value
    FROM {field_data_field_file_resource} fdffr
    INNER JOIN
    (SELECT field_performer_value, entity_id perfid 
    FROM {field_data_field_performer}
    ) AS performers
    ON fdffr.field_file_resource_value = performers.perfid
    WHERE performers.field_performer_value LIKE :performer", 
    array(
      ':performer' => 'Apple%',
    )
  );

  $results = $query->rowCount();

  return $results;
}

function title_stats_narrator_totals() {

  $start = microtime(true);
  $query = db_query("SELECT field_file_resource_value
                    FROM {field_data_field_file_resource} fdffr
                    INNER JOIN
                    (SELECT entity_id perfid
                    FROM {field_data_field_performer}
                    ) AS performers
                    ON fdffr.field_file_resource_value = performers.perfid");
  $results = $query->rowCount();
  $end = microtime(true);

  $speed = ($end - $start) * 1000;
  dpm($speed, 'Full narrators query speed (ms): ');

  return $results;
}

function title_stats_subject_count_ranks($order, $lim) {

  $sql = "SELECT field_subject_tid fsubtid, name, COUNT(entity_id) cid 
    FROM {field_data_field_subject} fdfs 
    INNER JOIN  
    (SELECT tid, name 
     FROM {taxonomy_term_data} ttd 
     WHERE ttd.vid = :vid) AS terms 
     ON terms.tid = fdfs.field_subject_tid 
     GROUP BY fsubtid 
     ORDER BY cid " . $order . "
     LIMIT " . $lim;

  $query = db_query($sql, array(
      ':vid' => 3,)
     );

  $results = $query->fetchAll();

  return $results;
} 

function title_stats_cancon_genre_total() {

  $start = microtime(true);
  $query = db_query("SELECT DISTINCT entity_id
                     FROM {field_data_field_genre} fdfg
                     INNER JOIN 
                     (SELECT tid 
                     FROM {taxonomy_term_data}
                     WHERE name LIKE 'Canad%'
                     AND vid = :vid) AS catid
                     ON catid.tid = fdfg.field_genre_tid", 
                     array(
                      ':vid' => 4
                    ));
  $results = $query->fetchAll();
  
  $end = microtime(true);
  $speed = ($end - $start) * 1000;
  dpm($speed . 'ms', 'Canadian genre query speed (ms): ');

  return $results;
}

function title_stats_cancon_subject_total() {
  $start = microtime(true);
  $query = db_query("SELECT DISTINCT entity_id
                    FROM {field_data_field_subject} fdfs
                    INNER JOIN
                    (SELECT tid 
                     FROM {taxonomy_term_data}
                     WHERE name LIKE 'Canad%'
                     AND vid = :vid) AS catid
                     ON catid.tid = fdfs.field_subject_tid", 
                     array(
                      ':vid' => 3
                    ));
  $results = $query->fetchAll();

  $end = microtime(true);
  $speed = ($end - $start) * 1000;
  dpm($speed . 'ms', 'Canadian subject query speed (ms): ');

  return $results;
}


