<?php
/**
 * Implements hook_block_info().
 */
function nnels_title_stats_block_info() {
  $blocks = array();

  $blocks['title_stats'] = array(
    'info' => t('Title Statistics'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    );

  return $blocks;
}

function nnels_title_stats_block_view($block_name = '') {
  if ($block_name == 'title_stats') {

    $titles_total = title_stats_total_titles();
    $files_total = title_stats_total_file_resource();
    
    $synth_narrators = title_stats_synth_totals();
    $narrators = title_stats_narrator_totals();
    $nonsynth = (int)$narrators - (int)$synth_narrators;

    $files_rows = array(
      array('Published titles', $titles_total),
      array('File resources', $files_total),
      array('Synthetic narrated', $synth_narrators),
      array('Live narrated', $nonsynth),
      );

    $files_header = array(
      array('data' => 'Metric'),
      array('data' => 'Count'),
      );

    $content .= theme('table',
      array('header' => $files_header, 
            'rows' => $files_rows));

    $format_totals_raw = title_stats_format_totals();

    $formats = array(
      'DAISY 202',
      'DAISY 3',
      'Braille',
      'MP3',
      'e-text',
      'PDF',
      'EPUB 2',);

    $format_totals_combo = array_combine($formats, $format_totals_raw);

    $format_rows = array();
    foreach ($format_totals_combo as $key => $value) {
      $format_rows[] = array($key, (int)$value);
    }

    usort($format_rows, function($a, $b) {
    return $b[1] - $a[1];
    });

    //dpm($format_rows, 'Format rows before tabling: ');

    $format_header = array(
      array('data' => 'Format'),
      array('data' => 'Files Count'),
      );

    $content .= theme('table',
      array('header' => $format_header, 
            'rows' => $format_rows));

    $synth_narrators = title_stats_synth_totals();
    $narrators = title_stats_narrator_totals();
    $nonsynth = (int)$narrators - (int)$synth_narrators;

    //$cancon_genre = title_stats_cancon_genre_total();

    //$can_subj_tids = title_stats_cancon_subject_tids();
    //dpm($can_subj_tids, "Subject tids: ");

    //dpm($content, "Contents of content: ");
    //$cancon_subject = title_stats_cancon_subject_total();
    //dpm($cancon_subject, "Published repo items with cancon subject: ");

    $block = array(
      'subject' => t('NNELS Title Stats'),
      'content' => $content,
      );
  }

  return $block;
}

function title_stats_total_titles() {
  $start = microtime(true);
  $query = db_query("SELECT nid FROM {node} WHERE status = 1 AND type = :type", 
    array(
    ':type' => 'repository_item',
  ));
  $results = $query->rowCount(); //or $query->rowCount() faster?
  $end = microtime(true);

  $speed = ($end - $start) *1000;
  dpm($speed, 'Total titles query speed (ms): ');

  return $results;
}

function title_stats_total_file_resource() {
  
  $start = microtime(true);
  $query = db_query("SELECT DISTINCT entity_id
                    FROM {field_data_field_file_resource} fdfr
                    INNER JOIN
                    (SELECT nid
                    FROM {node}
                    WHERE type = :type
                    AND status = 1) AS nodes
                    ON nodes.nid = fdfr.entity_id", array(':type' => 'repository_item'
                    ));
  $results = $query->rowCount();
  $end = microtime(true);

  $speed = ($end - $start) * 1000;
  dpm($speed, 'Total files query speed (ms): ');

  return $results;
}

function title_stats_format_totals() {
  $start = microtime(true);
  $query = db_query("SELECT field_file_format_value, COUNT(entity_id) FROM {field_data_field_file_format} GROUP BY field_file_format_value");

  $results = $query->fetchAllKeyed();
  $end = microtime(true);

  $speed = ($end - $start) * 1000;
  dpm($speed, 'Total files query speed (ms): ');

  return $results;
}

function title_stats_synth_totals() {
  $start = microtime(true);
  $query = db_query("SELECT field_performer_value FROM {field_data_field_performer} WHERE field_performer_value LIKE :performer", 
    array(
      ':performer' => 'Apple%',
    )
  );
  $results = $query->rowCount();
  $end = microtime(true);

  $speed = ($end - $start) * 1000;
  dpm($speed, 'Synth narrators query speed (ms): ');

  return $results;
}

function title_stats_narrator_totals() {
  $start = microtime(true);
  $query = db_query("SELECT field_performer_value FROM {field_data_field_performer}");

  $results = $query->rowCount();
  $end = microtime(true);

  $speed = ($end - $start) * 1000;
  dpm($speed, 'Full narrators query speed (ms): ');

  return $results;
} 

function title_stats_cancon_genre_total() {
  $start = microtime(true);
  $query = db_query("SELECT DISTINCT entity_id
                     FROM {field_data_field_genre} fdfg
                     INNER JOIN 
                        (SELECT tid 
                        FROM {taxonomy_term_data}
                        WHERE name LIKE 'Canad%'
                        AND vid = 4) AS catid
                     ON catid.tid = fdfg.field_genre_tid");
  $results = $query->fetchAll();
  $end = microtime(true);
  $speed = ($end - $start) * 1000;
  dpm($speed . 'ms', 'Canadian genre query speed (ms): ');

  return $results;
}

function title_stats_cancon_subject_tids() {
  $query = db_query("SELECT tid FROM {taxonomy_term_data WHERE name LIKE 'Canad%' AND vid = 3");
  $results = $query->fetchAll();

  return $results;
}

/*function title_stats_cancon_subject_total() {

  

  $start = microtime(true);
  $query = new EntityFieldQuery;
  $count = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'repository_item')
    ->propertyCondition('status', 1)
    ->propertyCondition('field_dc_subject', 'tid', $can_subj_tids)
    ->execute();

  $query = db_query("")

  $end = microtime(true);
  $speed = ($end - $start) * 1000;
  dpm($speed . 'ms', 'Canadian subject query speed (ms): ');

  return $result;
}*/